The decorator pattern attaches additional responsibilities to an object dynamically. Decorators 
provide a flexible alternative to subclassing for extending functionality.

This pattern creates a decorator class which wraps the original class and provides additional functionality 
keeping class methods signature intact. Classically, Decorators offered the ability to add behavior to existing 
classes in a system dynamically. The idea was that the decoration itself wasnâ€™t essential to the base functionality 
of the class; otherwise, it would be baked into the superclass itself.



They can be used to modify existing systems where we wish to add additional features to objects without the need 
to heavily modify the underlying code using them. A common reason why developers use them is that their applications 
may contain features requiring a large quantity of distinct types of object. Imagine having to define hundreds of different 
object constructors for, say, a JavaScript game.

https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch09s14.html

https://www.geeksforgeeks.org/decorator-pattern/
