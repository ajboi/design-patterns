Visitor design pattern is one of the behavioral design patterns. It is used when we have to perform an 
operation on a group of similar kind of Objects. With the help of visitor pattern, we can move the operational 
logic from the objects to another class.

The visitor pattern consists of two parts:
1. a method called Visit() which is implemented by the visitor and is called for every element in the data structure.
2. visitable classes providing Accept() methods that accept a visitor.


Motivation
Collections are data types widely used in object oriented programming. Often collections contain objects of different
types and in those cases some operations have to be performed on all the collection elements without knowing the type.

A possible approach to apply a specific operation on objects of different types in a collection would be the use if blocks
in conjunction with 'instanceof' for each element. This approach is not a nice one, not flexible and not object oriented at 
all. At this point we should think to the Open Close principle and we should remember from there that we can replace if blocks
with an abstract class and each concrete class will implement its own operation.


https://www.oodesign.com/visitor-pattern.html#:~:text=Visitor%20pattern%20allows%20us%20to,which%20have%20to%20be%20added.


